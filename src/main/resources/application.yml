spring:
  application:
    name: "${IMAGE_NAME:template-spring-boot}"

hello:
  pattern: "Hello there, %s!"

greetingservice:
  beanName: "hola"

kafka:
  commonProperties:
    bootstrapServers: ${BOOTSTRAP_SERVERS}
    securityProtocol: SASL_SSL
    saslMechanism: PLAIN
    username: ${USERNAME:token}
    apiKey: ${API_KEY:}
    sslProtocol: TLSv1.2
    sslEnabledProtocols: TLSv1.2
    sslEndpointIdentificationAlgorithm: HTTPS
    truststoreEnabled: ${TRUSTSTORE_ENABLED:false}
    sslTruststoreLocation: ${TRUSTSTORE_LOCATION:}
    sslTruststorePassword: ${TRUSTSTORE_PASSWORD:}

  orders:
    sharedProperties:
      topic: ${ORDERS_TOPIC:orders}

    producerProperties:
      acks: ${ORDERS_ACKS:1}
      enableIdempotence: ${ORDERS_ENABLE_IDEMPOTENCE:false}
      clientId: ${ORDERS_PRODUCER_CLIENT_ID:order-event-producer}

    consumerProperties:
      groupId: ${ORDERS_GROUP_ID:order-ms-consumer-grp}
      clientId: ${ORDERS_CONSUMER_CLIENT_ID:OrderEventsAgent}
      autoOffsetReset: ${ORDERS_AUTO_OFFSET_RESET:latest}
      enableAutoCommit: ${ORDERS_ENABLE_AUTO_COMMIT:true}

  word-count:
    producerProperties:
      topic: ${WORD_COUNT_PRODUCER_TOPIC:streams-wordcount-plaintext-input}
      acks: ${WORD_COUNT_ACKS:1}
      enableIdempotence: ${WORD_COUNT_ENABLE_IDEMPOTENCE:false}
      clientId: ${WORD_COUNT_CLIENT_ID:OrderEventsAgent}

    streamProperties:
      inputTopic: ${WORD_COUNT_STREAM_INPUT_TOPIC:streams-wordcount-plaintext-input}
      outputTopic: ${WORD_COUNT_STREAM_INPUT_TOPIC:streams-wordcount-output}
      applicationId: ${WORD_COUNT_STREAM_APPLICATION_ID:streams-wordcount}
      store-name: ${WORD_COUNT_STREAM_STORE_NAME:counts-store}

swagger:
  baseApiPackage:
  - "com.ibm.hello"
  - "com.ibm.health"
  title: "${IMAGE_NAME:template-spring-boot}"
  description: "Description"
  version: "1.0.0"
  termsOfServiceUrl: ""

  license: "MIT"
  licenseUrl: ""

management:
  endpoints:
    web:
      base-path: "/metrics"
      exposure:
        include: "*"

server:
  port: ${PORT:9080}

logging:
  level:
    ROOT: ${LOG_LEVEL:INFO}
    com.ibm.hello: DEBUG
    com.ibm.cloud_garage: DEBUG
    org.springframework: ERROR
    org.springframework.web: WARN
    org.springframework.web.filter.CommonsRequestLoggingFilter: DEBUG
    ch.qos.logback.classic: ERROR
  pattern:
    console: "%d{YYYY-dd-MM HH:mm:ss.SSS} %magenta([%thread]) %highlight(%-5level) %X{X-B3-TraceId:-} ${spring.application.name} %logger{39}.%M %L - %msg%n"
